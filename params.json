{
  "name": "Elham",
  "tagline": "Inspiring You The Next",
  "body": "# Elham - Inspiring You The Next - A Product Of UROSD Lab\r\nLet's build together by not reinventing the wheel but assembling the wheels to reinvent a new giant.\r\n### Version\r\n1.0.0\r\n### Installation\r\n- First install composer globally(if you don't have it) by running the following commands\r\n```sh\r\n$ curl -sS https://getcomposer.org/installer | php && sudo mv composer.phar /usr/local/bin/composer\r\n```\r\n- Then install Elham by the following command(for latest stable releases)\r\n```sh\r\n$ composer create-project chandan07cse/elham YOUR_PROJECT_NAME\r\n```\r\n- But if you want Elham from its master branch, then you could certainly type it\r\n```sh\r\n$ composer create-project chandan07cse/elham=dev-master YOUR_PROJECT_NAME\r\n```\r\n- Now cd into your_project_name/public & run by the php command\r\n```sh\r\n$ cd YOUR_PROJECT_NAME/public\r\n$ php -S localhost:8000\r\n```\r\n- Note : For the rest of the project we'll run each & every command from the project directory. For that\r\n```sh\r\n$ cd ../\r\n```\r\n# Dependencies\r\n- To check the list of dependencies Elham relies, run the command\r\n```sh\r\n$ composer info\r\n```\r\n# Elham Command Alias\r\n- Let's run the below command to run elham command\r\n```sh\r\n$ echo \"alias elham='./elham'\" >> ~/.bash_aliases && source ~/.bash_aliases\r\n```\r\n- Now you can run elham command through out your project. To check run from the terminal\r\n```sh\r\n$ elham\r\n```\r\n# Build Controller Through CLI\r\n- Elham provides you the build:controller command\r\n```sh\r\n$ elham build:controller YourController\r\n```\r\n- Check it by finding it in app/Controller directory of your project.\r\n- By default elham generates resourceful controller. But if you want you can always make a plain controller by running\r\n```sh\r\n$ elham build:controller YourController plain\r\n```\r\n# Build Model Through CLI\r\n- Elham also provides you build:model command\r\n```sh\r\n$ elham build:model YourModel\r\n```\r\n# Build Form Through CLI\r\n- Elham ships with build:form command \r\n```sh\r\n$ elham build:form YourForm\r\n```\r\n- A dummy blade form will be generated inside app/Views/_partials directory.\r\n\r\n# Build Validator Through CLI\r\n- Elham also provides you build:validator command \r\n```sh\r\n$ elham build:validator YourValidator\r\n```\r\n- A validation class will be generated inside app/Validation directory.\r\n\r\n# Help keyword for CLI generators\r\n- Now if you need any help just type \r\n```sh \r\n$ elham help build:keyword \r\n``` \r\n- All the commands check the existing ones as well for simplicity.\r\n\r\n# Elham Templating Engines \r\n- Elham ships with Blade and Plain view for rendering its View. But if you want you can use twig too. For that you\r\nwill need to install [TWIG](http://twig.sensiolabs.org/) by the following command\r\n```sh\r\n$ composer require twig/twig\r\n```\r\n\r\n# Elham Migrations\r\n- As Elham used [Phinx](https://phinx.org/) for migrations, so to use phinx command just run from the terminal\r\n```sh\r\n$ echo \"alias phinx='./phinx'\" >> ~/.bash_aliases && source ~/.bash_aliases\r\n```\r\n- Now you'll be able to run phinx command. To make sure phinx running perfectly, run in terminal\r\n```sh\r\n$ phinx\r\n```\r\n- You'll get the list of [Phinx](https://phinx.org/) command. To use phinx, first initialize it by the following command\r\n```sh\r\n$ phinx init\r\n```\r\n- A phinx.yml file will be generated. You need to customize it. Sample customization for development listed below\r\n```sh\r\n$ environments:\r\n$ default_database: development\r\n$ development:\r\n          adapter: sqlite\r\n          host: localhost\r\n          name: db/database.sqlite\r\n          user: root\r\n          pass: ''\r\n          port: 3306\r\n          charset: utf8\r\n```\r\n- Phinx uses CamelCase for its functioning & it'll store the migrations & seeding inside db/migration & db/seeds directory respectively.\r\nSo if you wanna create a migration for Students table, just run in terminal\r\n```sh\r\n$ phinx create Students\r\n```\r\n- A new unique migration for Students will be generated inside db/migrations directory of Elham like below\r\n```sh\r\n$ use Phinx\\Migration\\AbstractMigration;\r\n$ class Students extends AbstractMigration\r\n$  { \r\n$       public function change()\r\n$       {\r\n$   \r\n$       }\r\n$   }\r\n```\r\n- Now we not gonna use the change method for the migration. Beside we'll create two methods up() & down() for our migration & rollback. So for that\r\nwe gonna code a bit something like below. Say we've our student table consisting with roll & name.\r\n```sh\r\n$ use Phinx\\Migration\\AbstractMigration;\r\n$ class Students extends AbstractMigration\r\n$  { \r\n$       public function up()\r\n$       {\r\n$            $students = $this->table('students');\r\n$            $students->addColumn('name','string',['length'=>100])\r\n$                     ->addColumn('roll','string')\r\n$                     ->create();\r\n$       }\r\n$       public function down()\r\n$       {\r\n$           $this->dropTable('students');\r\n$       }\r\n$\r\n$   }\r\n```\r\n- Now to migrate, run from terminal\r\n```sh\r\n$ phinx migrate\r\n```\r\n- It'll affect our default db/databse.sqlite hopefully. Now to rollback, just run from terminal\r\n```sh\r\n$ phinx rollback\r\n```\r\n- To explore more about Phinx, please read the [documentation](http://docs.phinx.org/en/latest/). \r\n\r\n# Elham Playground\r\n- Elham also used [Psyshell](http://psysh.org/) for tinkering with its functionalities, so to use psysh command just run from the terminal\r\n```sh\r\n$ echo \"alias psysh='./psysh'\" >> ~/.bash_aliases && source ~/.bash_aliases\r\n```\r\n- Now if you wanna tinkering with psyshell just run in terminal\r\n```sh\r\n$ psysh\r\n```\r\n- You'll be into the Psyshell now. If you wanna start toying around then first initialize the proper environment. To init the environment, run in terminal\r\n```sh\r\n$ $enviornment = new Dotenv\\Dotenv(__DIR__);\r\n$ $environment->load();\r\n```\r\n- To init the database with eloquent, run in terminal\r\n```sh\r\n$ $db = new config\\database;\r\n```\r\n- Now if you wanna query through Eloquent/Query Builder, create an instance of the Capsule\r\n```sh\r\n$ $db->connectThroughCapsule(); \r\n```\r\n- And if you wanna query through PDO, create an instance of the PDO\r\n```sh\r\n$ $db->connectThroughPDO(); \r\n```\r\n- Now if you wanna play with User model, create an object of User by running in terminal\r\n```sh\r\n$ $user = new Elham\\Model\\User;\r\n```\r\n- To get all data from User model, just run in terminal\r\n```sh\r\n$ $user->all()->toArray();\r\n```\r\n- You can run every bit of eloquent & pdo queries along with other functionalities through [Psyshell](http://psysh.org/).\r\n\r\n# Elham Frontend Housekeeping\r\n- Elham used [Gulp](http://gulpjs.com/) for basic front-end housekeeping of tasks like minifying css,js, autoprefixing of css and so on & so forth. To use gulp, first install node js by the following command\r\n```sh\r\n$ sudo apt-get install npm\r\n```\r\n- After that we need to install gulp globaly by the following command\r\n```sh\r\n$ sudo npm install -g gulp\r\n```\r\n- As pacakge.json already ships with Elham. So you don't have to create it. To install gulp just run the following command\r\n```sh\r\n$ sudo npm install gulp --save-dev\r\n```\r\n- The way Gulp work is - Everything is split into various plugins. So each plugin does one job & one job only. And that way we can pipe the output of one function to another. So we can say - Let's autoprefix this file & then minify it & then output it some file & then finally provide some sort of notifications. All of that stuff is really easy with Gulp.\r\n- So if we want to use plugins, we need to install some.\r\nLets install, just to get started, How about minifying our css\r\nWe can do that by running into terminal\r\n```sh\r\n$ sudo npm install gulp-clean-css --save-dev\r\n```\r\n\r\n# Elham Zero Second Deployment\r\n- Elham proudly compatibles with [ngrok](https://ngrok.com/). So you can deploy it less than a second.\r\nFor that you'll have to install node & nodejs-legacy by the following command\r\n```sh\r\n$ sudo apt-get install node\r\n$ sudo apt install nodejs-legacy\r\n```\r\n- After that we gonna install ngrok through (npm)node package manager globally\r\n```sh\r\n$ sudo npm install ngrok -g\r\n```\r\n- Now we gonna deploy our project by just running the following command\r\n```sh\r\n$ ngrok http 8000\r\n``` \r\n- Make sure you are running your project through port 8000. If you are using other port, then use\r\n that port to ngrok\r\n\r\n# Elham Production Deployment\r\n- Don't worry it also supports any repo(Github,Gitlab,Bitbucket....) and any CI (Jenkins) and any server(Linux Distro. preferred) in deployment.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}